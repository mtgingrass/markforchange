{
  "hash": "422cba5c148cf8314e0f7acf25c64e6c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Automate - Images Folder to Quarto Blog Post with R\"\nauthor: \"Mark Gingrass\"\ndate: 2025-02-10\ncategories: [\"Programming\", \"Automation\"]\nformat: html\nexecute:\n  eval: false\ndescription: \"A step-by-step guide to generating Quarto blog posts with a folder of images using R. Learn how to automate markdown creation, structure metadata, and display images seamlessly with reproducible code.\"\nimage: image_generator.png \nlightbox: true\n---\n\n\n\n# Introduction\n\nIn this tutorial, we'll walk through an R script that automatically generates a Quarto blog post from images stored in a directory. If you have a collection of images and want to quickly create a visually appealing blog post, this guide will help you automate the process.\n\n::: {.callout-note}\nThis code generates Markdown, which is itself code, that can then be built and published to a site. Essentially, it acts as a Markdown generator, producing properly formatted Markdown for your images. Once the Markdown file is created, you can build and publish it using Hugo, Quarto, Jekyll, Gatsby, or any other Static Site Generator (SSG) of your choice.\n:::\n\nIn a future post, I will show you how to create a Shortcut to convert lots of `heic` images to `webp` images for much smaller file sizes. I'm assuming you already have a folder full of optimized images.\n\n## Loading Required Libraries\n\nBefore we begin, we need to load the necessary R libraries that will help us manipulate file paths, generate markdown content, and handle string operations.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(glue)   # For string interpolation\nlibrary(fs)     # For file system operations\nlibrary(purrr)  # For functional programming and iteration\n```\n:::\n\n\n\nThese libraries make sure that we can scan directories, manipulate strings, and generate our final Quarto markdown file.\n\n## Setting Up Directories and Output File\n\nWe define the directory containing the images and specify the output file name.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimage_dir <- \"images/\"  # Folder where images are stored\noutput_file <- \"index.qmd\"  # Output file for the blog post\n```\n:::\n\n\n\n## Checking if the Image Directory Exists\n\nBefore proceeding, we must ensure that the specified image directory exists. If it does not, the script will stop execution and display an error message.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!dir_exists(image_dir)) {\n  stop(glue(\"Directory '{image_dir}' does not exist. Please check the path.\"))\n}\n```\n:::\n\n\n\nThis prevents errors down the line by ensuring that we have a valid directory before processing files.\n\n## Listing Image Files\n\nNext, we list all image files in the directory. The `dir_ls` function retrieves files matching specific extensions: `.jpg`, `.jpeg`, `.png`, `.gif`, and `.webp`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimage_files <- dir_ls(image_dir, regexp = \"\\\\.(jpg|jpeg|png|gif|webp)$\")\n```\n:::\n\n\n\nIf no images are found, the script stops execution and prompts the user to add images.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (length(image_files) == 0) {\n  stop(glue(\"No image files found in '{image_dir}'. Please add some images.\"))\n}\n```\n:::\n\n\n\n## Selecting a Featured Image\n\nThe first image in the list is chosen as the featured image. This is useful for blog platforms that require a cover image.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfeatured_image <- image_files[1]  \nfeatured_image_path <- glue(\"{featured_image}\")  # Ensure proper formatting\n```\n:::\n\n\n\n## Generating Markdown Content for Each Image\n\nTo display images in the blog post, we create a function that generates markdown content for each image. The function extracts the file name, removes the extension, and formats it into a markdown-friendly structure.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenerate_markdown <- function(image_path) {\n  image_name <- path_file(image_path)  # Extract file name\n  base_name <- path_ext_remove(image_name)  # Remove file extension\n  \n  # Generate markdown with title and image\n  glue(\"\\n## {base_name}\\n\\n![{base_name}]({image_path})\\n\")\n}\n```\n:::\n\n\n\nWe then apply this function to all images using `map_chr`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmarkdown_content <- map_chr(image_files, generate_markdown)\n```\n:::\n\n\n\n## Creating the Quarto Metadata\n\nEvery Quarto post requires metadata, such as the title, author, date, categories, and featured image.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmetadata <- c(\n  \"---\",\n  \"title: 'My Photo Blog Post'\",\n  \"author: 'Your Name'\",\n  glue(\"date: '{Sys.Date()}'\"),  # Automatically insert the current date\n  \"categories: ['Photography', 'Hiking']\",\n  glue(\"image: '{featured_image_path}'\"),  # Set the featured image\n  \"format: html\",\n  \"---\\n\\n\"\n)\n```\n:::\n\n\n\n## Combining Metadata and Markdown Content\n\nFinally, we merge the metadata with the generated markdown content to form the complete blog post.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_post <- paste0(paste(metadata, collapse = \"\\n\"), \"\\n\", paste(markdown_content, collapse = \"\\n\"))\n```\n:::\n\n\n\nWe then write this content to the `index.qmd` file.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwriteLines(final_post, output_file)\n```\n:::\n\n\n\n## Completion Message\n\nOnce the script successfully generates the markdown file, we display a message to notify the user.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmessage(\"Markdown post generated successfully at: \", output_file)\n```\n:::\n\n\n\n# Conclusion\n\nThis script automates the process of creating a Quarto blog post from images stored in a directory. By leveraging Râ€™s file system handling, string interpolation, and functional programming capabilities, we efficiently generate a structured markdown file ready for publishing.\n\nTry running this script on your own collection of images and see how it works for you!\n\n## Full Source\nFind the full source doe repositary [here](https://github.com/mtgingrass/images_to_markdown.git).\n\n## Credit\n\nI give full credit to [Jaydey Ryan](https://jadeyryan.com/blog/2023-11-19_publish-quarto-website/#configure-continuous-deployment) for their excellent instructions on setting up continuous deployment with Netlify and GitHub. Thank you! \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}